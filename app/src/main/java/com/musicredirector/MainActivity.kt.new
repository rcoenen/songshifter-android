package com.musicredirector

import android.content.ComponentName
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.RadioGroup
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.pm.PackageInfoCompat
import com.google.android.material.dialog.MaterialAlertDialogBuilder

class MainActivity : AppCompatActivity() {
    private lateinit var platformRadioGroup: RadioGroup
    private lateinit var spotifyRedirectionIndicator: View
    private lateinit var youtubeRedirectionIndicator: View
    private lateinit var shazamRedirectionIndicator: View
    private lateinit var youtubeRedirectLayout: View
    private lateinit var spotifyRedirectLayout: View
    private lateinit var preferencesHelper: PreferencesHelper
    
    private var youTubeMusicWarningDialog: AlertDialog? = null
    
    private val EXAMPLE_SPOTIFY_URL = "https://open.spotify.com/track/6ciGSCeUiA46HANRzcq8o0?si=hNwYN8OsReahI3JecgRaFg"
    private val EXAMPLE_YOUTUBE_MUSIC_URL = "https://music.youtube.com/watch?v=BsoaesiWaCo&si=W2A3SeZGupYgMApr"
    
    companion object {
        private const val TAG = "MainActivity"
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        preferencesHelper = PreferencesHelper(this)
        
        // Initialize views
        platformRadioGroup = findViewById(R.id.platformRadioGroup)
        spotifyRedirectionIndicator = findViewById(R.id.spotifyRedirectionIndicator)
        youtubeRedirectionIndicator = findViewById(R.id.youtubeRedirectionIndicator)
        shazamRedirectionIndicator = findViewById(R.id.shazamRedirectionIndicator)
        youtubeRedirectLayout = findViewById(R.id.youtubeRedirectLayout)
        spotifyRedirectLayout = findViewById(R.id.spotifyRedirectLayout)
        
        // Set build version
        val buildVersionText = findViewById<TextView>(R.id.buildVersionText)
        try {
            val packageInfo = packageManager.getPackageInfo(packageName, 0)
            val versionCode = PackageInfoCompat.getLongVersionCode(packageInfo)
            buildVersionText.text = "BUILD: $versionCode"
        } catch (e: Exception) {
            Log.e(TAG, "Error getting version code", e)
            buildVersionText.text = "BUILD: Unknown"
        }
        
        // Set up click listeners
        setupRedirectLayouts()
        setupPlatformRadioGroup()
        setupTestButton()
        
        // Update status indicators for the preferred platform
        updateStatusIndicators()
        
        // Handle any incoming intent
        handleIncomingIntent(intent)
    }
    
    private fun setupRedirectLayouts() {
        // Make layouts clickable for testing redirection
        youtubeRedirectLayout.setOnClickListener {
            testRedirection(EXAMPLE_YOUTUBE_MUSIC_URL)
        }
        
        spotifyRedirectLayout.setOnClickListener {
            testRedirection(EXAMPLE_SPOTIFY_URL)
        }
    }
    
    private fun setupPlatformRadioGroup() {
        platformRadioGroup.setOnCheckedChangeListener { _, checkedId ->
            val newPlatform = when (checkedId) {
                R.id.radio_youtube_music -> PreferencesHelper.PLATFORM_YOUTUBE_MUSIC
                R.id.radio_spotify -> PreferencesHelper.PLATFORM_SPOTIFY
                else -> PreferencesHelper.PLATFORM_YOUTUBE_MUSIC
            }
            
            // If switching to YouTube Music, dismiss any warning dialog
            if (newPlatform == PreferencesHelper.PLATFORM_YOUTUBE_MUSIC) {
                youTubeMusicWarningDialog?.dismiss()
            }
            // If switching to Spotify, show warning if needed
            else if (newPlatform == PreferencesHelper.PLATFORM_SPOTIFY && 
                isYouTubeMusicInstalled() && 
                !isYouTubeMusicDisabled() &&
                isYouTubeMusicHandlingLinks()) {
                showYouTubeMusicWarningDialog()
            }
            
            preferencesHelper.setPreferredPlatform(newPlatform)
            updateStatusIndicators()
        }
        
        // Set initial radio button based on saved preference
        val platform = preferencesHelper.getPreferredPlatform()
        when (platform) {
            PreferencesHelper.PLATFORM_YOUTUBE_MUSIC -> platformRadioGroup.check(R.id.radio_youtube_music)
            PreferencesHelper.PLATFORM_SPOTIFY -> platformRadioGroup.check(R.id.radio_spotify)
        }
        
        // Show initial warning if needed
        if (platform == PreferencesHelper.PLATFORM_SPOTIFY && 
            isYouTubeMusicInstalled() && 
            !isYouTubeMusicDisabled() &&
            isYouTubeMusicHandlingLinks()) {
            showYouTubeMusicWarningDialog()
        }
    }
    
    private fun showYouTubeMusicWarningDialog() {
        // First check if YouTube Music is disabled
        if (isYouTubeMusicDisabled()) {
            return
        }
        
        // Then check if it's handling links
        if (!isYouTubeMusicHandlingLinks()) {
            return
        }
        
        // Dismiss any existing dialog
        youTubeMusicWarningDialog?.dismiss()
        
        youTubeMusicWarningDialog = MaterialAlertDialogBuilder(this)
            .setTitle("⚠️ Action Required")
            .setMessage("Since you've selected Spotify as your preferred platform, you need to disable YouTube Music's link handling to ensure links open in Spotify.\n\nWould you like to open YouTube Music's settings now?")
            .setPositiveButton("Open Settings") { dialog, _ ->
                try {
                    openYouTubeMusicSettings()
                } catch (e: Exception) {
                    Toast.makeText(this, 
                        "Couldn't open YouTube Music settings. Please disable link handling manually.", 
                        Toast.LENGTH_LONG).show()
                }
                dialog.dismiss()
            }
            .setNegativeButton("Later") { dialog, _ -> 
                dialog.dismiss()
            }
            .setCancelable(true)  // Make dialog cancelable
            .create()
            
        youTubeMusicWarningDialog?.show()
    }
    
    private fun setupTestButton() {
        val testButton = findViewById<View>(R.id.testButton)
        testButton.setOnClickListener {
            // Test redirection based on current platform setting
            val preferredPlatform = preferencesHelper.getPreferredPlatform()
            if (preferredPlatform == PreferencesHelper.PLATFORM_SPOTIFY) {
                testRedirection(EXAMPLE_YOUTUBE_MUSIC_URL)
            } else {
                testRedirection(EXAMPLE_SPOTIFY_URL)
            }
        }
    }
    
    private fun testRedirection(testUrl: String) {
        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(testUrl))
        intent.setPackage(packageName)
        startActivity(intent)
    }
    
    private fun isYouTubeMusicInstalled(): Boolean {
        return try {
            packageManager.getPackageInfo("com.google.android.apps.youtube.music", 0)
            true
        } catch (e: PackageManager.NameNotFoundException) {
            false
        }
    }
    
    private fun isYouTubeMusicDisabled(): Boolean {
        return try {
            val appInfo = packageManager.getApplicationInfo("com.google.android.apps.youtube.music", 0)
            !appInfo.enabled
        } catch (e: PackageManager.NameNotFoundException) {
            // If app is not found, consider it effectively disabled
            true
        }
    }
    
    private fun isYouTubeMusicHandlingLinks(): Boolean {
        try {
            val pm = packageManager
            val testUri = Uri.parse("https://music.youtube.com/watch?v=test")
            val testIntent = Intent(Intent.ACTION_VIEW, testUri)
            
            // Query for activities that can handle this URI
            val resolveInfoList = pm.queryIntentActivities(testIntent, PackageManager.MATCH_DEFAULT_ONLY)
            
            // Check if YouTube Music is in the list of handlers
            return resolveInfoList.any { resolveInfo ->
                resolveInfo.activityInfo.packageName == "com.google.android.apps.youtube.music"
            }
        } catch (e: Exception) {
            e.printStackTrace()
            return false
        }
    }
    
    private fun openYouTubeMusicSettings() {
        try {
            val intent = Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
            val uri = Uri.fromParts("package", "com.google.android.apps.youtube.music", null)
            intent.data = uri
            startActivity(intent)
            
            Toast.makeText(this, 
                "In YouTube Music settings, go to 'Open by default' and disable link handling", 
                Toast.LENGTH_LONG).show()
        } catch (e: Exception) {
            Toast.makeText(this, 
                "Couldn't open YouTube Music settings. Please disable link handling manually.", 
                Toast.LENGTH_LONG).show()
        }
    }
    
    private fun openAppLinkSettings() {
        val intent = Intent(android.provider.Settings.ACTION_APP_OPEN_BY_DEFAULT_SETTINGS)
        val uri = Uri.fromParts("package", packageName, null)
        intent.data = uri
        
        try {
            startActivity(intent)
        } catch (e: Exception) {
            // Fallback if direct settings isn't available
            try {
                val fallbackIntent = Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
                fallbackIntent.data = Uri.fromParts("package", packageName, null)
                startActivity(fallbackIntent)
                
                Toast.makeText(this, 
                    "Go to 'Open by default' and select 'Add links'", 
                    Toast.LENGTH_LONG).show()
            } catch (e2: Exception) {
                Toast.makeText(this, 
                    "Couldn't open app settings. Please enable link handling manually.", 
                    Toast.LENGTH_LONG).show()
            }
        }
    }
    
    private fun isAppLinksEnabled(domain: String): Boolean {
        try {
            val pm = packageManager
            
            // Create a test URI for the specific domain we want to check
            val testUri = Uri.parse("https://$domain/test")
            val testIntent = Intent(Intent.ACTION_VIEW, testUri)
            
            // Query for activities that can handle this URI, requiring exact match
            val resolveInfoList = pm.queryIntentActivities(testIntent, PackageManager.MATCH_DEFAULT_ONLY)
            
            // Check if our app is the default handler for this domain
            val ourPackageName = packageName
            val isDefaultHandler = resolveInfoList.any { resolveInfo ->
                resolveInfo.activityInfo.packageName == ourPackageName &&
                resolveInfo.activityInfo.name == "com.musicredirector.RedirectActivity"
            }
            
            // Only return true if we're actually set up as the handler
            return isDefaultHandler
            
        } catch (e: Exception) {
            e.printStackTrace()
            // If there's an error, assume we're NOT enabled (safer default)
            return false 
        }
    }
    
    private fun updateStatusIndicators() {
        // Get current platform preference
        val preferredPlatform = preferencesHelper.getPreferredPlatform()
        
        // Update radio button selection without triggering listener
        platformRadioGroup.setOnCheckedChangeListener(null)
        if (preferredPlatform == PreferencesHelper.PLATFORM_SPOTIFY) {
            platformRadioGroup.check(R.id.radio_spotify)
        } else {
            platformRadioGroup.check(R.id.radio_youtube_music)
        }
        setupPlatformRadioGroup() // Re-add the listener
        
        // Update indicators based on preferred platform
        if (preferredPlatform == PreferencesHelper.PLATFORM_YOUTUBE_MUSIC) {
            // When YouTube Music is preferred, show Spotify and hide YouTube Music
            spotifyRedirectLayout.visibility = View.VISIBLE
            spotifyRedirectionIndicator.setBackgroundResource(
                if (preferencesHelper.isSpotifyRedirectionEnabled()) 
                    R.drawable.indicator_active 
                else 
                    R.drawable.indicator_inactive
            )
            
            // Hide YouTube Music redirection (since it's the preferred platform)
            youtubeRedirectLayout.visibility = View.GONE
            
            shazamRedirectionIndicator.setBackgroundResource(
                if (preferencesHelper.isShazamRedirectionEnabled()) 
                    R.drawable.indicator_active 
                else 
                    R.drawable.indicator_inactive
            )
        } else {
            // When Spotify is preferred, hide Spotify and show YouTube Music
            spotifyRedirectLayout.visibility = View.GONE
            
            // Show YouTube Music redirection
            youtubeRedirectLayout.visibility = View.VISIBLE
            youtubeRedirectionIndicator.setBackgroundResource(
                if (preferencesHelper.isYouTubeMusicRedirectionEnabled()) 
                    R.drawable.indicator_active 
                else 
                    R.drawable.indicator_inactive
            )
            
            shazamRedirectionIndicator.setBackgroundResource(
                if (preferencesHelper.isShazamRedirectionEnabled()) 
                    R.drawable.indicator_active 
                else 
                    R.drawable.indicator_inactive
            )
        }
        
        // Check link interception status
        checkLinkInterceptionStatus()
    }
    
    private fun checkLinkInterceptionStatus() {
        val preferredPlatform = preferencesHelper.getPreferredPlatform()
        // Check if our app is set up to handle links for the preferred platform
        val domain = if (preferredPlatform == PreferencesHelper.PLATFORM_SPOTIFY) {
            "music.youtube.com" // When Spotify is preferred, we need to intercept YouTube Music links
        } else {
            "open.spotify.com" // When YouTube Music is preferred, we need to intercept Spotify links
        }
        
        val isLinkInterceptionActive = isAppLinksEnabled(domain)
        
        // Update link interception status
        val linkStatusIcon = findViewById<View>(R.id.linkInterceptionStatusIcon)
        val linkStatusText = findViewById<TextView>(R.id.linkInterceptionStatusText)
        
        linkStatusIcon.setBackgroundResource(if (isLinkInterceptionActive) R.drawable.status_green else R.drawable.status_red)
        linkStatusText.text = if (isLinkInterceptionActive) 
            "Link interception: Active" 
        else 
            "${if (preferredPlatform == PreferencesHelper.PLATFORM_SPOTIFY) "YouTube Music" else "Spotify"} links: Not intercepted (tap to fix)"
        
        val linkStatusLayout = findViewById<View>(R.id.linkInterceptionLayout)
        if (!isLinkInterceptionActive) {
            linkStatusLayout.setOnClickListener {
                openAppLinkSettings()
            }
        } else {
            linkStatusLayout.setOnClickListener(null)
        }
        
        // Update YouTube Music status (only show when Spotify is preferred)
        val ytMusicLayout = findViewById<View>(R.id.ytMusicStatusLayout)
        if (preferredPlatform == PreferencesHelper.PLATFORM_SPOTIFY && isYouTubeMusicInstalled()) {
            ytMusicLayout.visibility = View.VISIBLE
            val ytMusicStatusIcon = findViewById<View>(R.id.ytMusicStatusIcon)
            val ytMusicStatusText = findViewById<TextView>(R.id.ytMusicStatusText)
            
            val isYtMusicHandlingLinks = isYouTubeMusicHandlingLinks()
            ytMusicStatusIcon.setBackgroundResource(if (!isYtMusicHandlingLinks) R.drawable.status_green else R.drawable.status_red)
            ytMusicStatusText.text = if (!isYtMusicHandlingLinks) 
                "YouTube Music links: Disabled correctly" 
            else 
                "YouTube Music links: Need to be disabled (tap to fix)"
            
            if (isYtMusicHandlingLinks) {
                ytMusicLayout.setOnClickListener {
                    openYouTubeMusicSettings()
                }
            } else {
                ytMusicLayout.setOnClickListener(null)
            }
        } else {
            ytMusicLayout.visibility = View.GONE
        }
    }
    
    private fun handleIncomingIntent(intent: Intent?) {
        intent?.data?.let { uri ->
            testRedirection(uri.toString())
        }
    }
    
    override fun onNewIntent(intent: Intent?) {
        super.onNewIntent(intent)
        handleIncomingIntent(intent)
    }
} 