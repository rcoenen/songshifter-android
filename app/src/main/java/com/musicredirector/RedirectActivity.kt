package com.musicredirector

import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class RedirectActivity : AppCompatActivity() {
    private lateinit var preferencesHelper: PreferencesHelper
    private lateinit var statusText: TextView
    private lateinit var progressOverlay: View
    
    companion object {
        private const val TAG = "RedirectActivity"
        private const val SPOTIFY_PACKAGE = "com.spotify.music"
        private const val YOUTUBE_MUSIC_PACKAGE = "com.google.android.apps.youtube.music"
        
        // URL patterns
        private const val SPOTIFY_TRACK_PATTERN = "open.spotify.com/track"
        private const val SPOTIFY_SEARCH_PATTERN = "open.spotify.com/search"
        private const val YOUTUBE_MUSIC_WATCH_PATTERN = "music.youtube.com/watch"
        private const val SHAZAM_SONG_PATTERN = "shazam.com/song"
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_redirect)

        statusText = findViewById(R.id.status_text)
        progressOverlay = findViewById(R.id.progress_overlay)

        preferencesHelper = PreferencesHelper(this)
        handleIntent(intent)
    }
    
    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        handleIntent(intent)
    }
    
    private fun handleIntent(intent: Intent) {
        val url = intent.data?.toString()
        if (url == null) {
            Log.e(TAG, "No URL provided")
            finish()
            return
        }
        
        Log.d(TAG, "üì• Received URL: $url")
        
        // Check if this is a URL we generated ourselves
        val isOurGeneratedUrl = isAppGeneratedUrl(url)
        if (isOurGeneratedUrl) {
            Log.d(TAG, "üîÑ Detected our own generated URL, directly launching target app")
            launchTargetApp(url)
            finish()
            return
        }
        
        if (url.contains(YOUTUBE_MUSIC_WATCH_PATTERN) && isYouTubeMusicEnabled()) {
            showYouTubeMusicWarning()
            finish()
            return
        }
        
        if (!shouldRedirect(url)) {
            Log.d(TAG, "üîÑ Redirection not needed for this URL, relaying to original app")
            relayToOriginalApp(url)
            finish()
            return
        }
        
        processRedirection(url)
    }
    
    /**
     * Checks if the URL was generated by our app (e.g. search URLs)
     */
    private fun isAppGeneratedUrl(url: String): Boolean {
        // Check if this is a Spotify search URL we generated
        if (url.contains(SPOTIFY_SEARCH_PATTERN)) {
            val preferredPlatform = preferencesHelper.getPreferredPlatform()
            if (preferredPlatform == PreferencesHelper.PLATFORM_SPOTIFY) {
                Log.d(TAG, "‚úÖ Detected our generated Spotify search URL")
                return true
            }
        }
        
        // Check if this is a YouTube Music search URL we generated
        if (url.contains("music.youtube.com/search")) {
            val preferredPlatform = preferencesHelper.getPreferredPlatform()
            if (preferredPlatform == PreferencesHelper.PLATFORM_YOUTUBE_MUSIC) {
                Log.d(TAG, "‚úÖ Detected our generated YouTube Music search URL")
                return true
            }
        }
        
        return false
    }
    
    /**
     * Launches the appropriate app for a URL we generated ourselves
     */
    private fun launchTargetApp(url: String) {
        try {
            Log.d(TAG, "üöÄ Directly launching target app for URL: $url")
            
            val targetPackage = when {
                url.contains("open.spotify.com") -> SPOTIFY_PACKAGE
                url.contains("music.youtube.com") -> YOUTUBE_MUSIC_PACKAGE
                else -> null
            }
            
            if (targetPackage != null && isAppInstalled(targetPackage)) {
                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url)).apply {
                    setPackage(targetPackage)
                    addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                }
                startActivity(intent)
                Log.d(TAG, "‚úÖ Successfully launched $targetPackage")
            } else {
                // Instead of using the system's default handler which might redirect back to us,
                // explicitly try to launch in a browser to break the redirect loop
                val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(url)).apply {
                    addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                    // Explicitly exclude our package to prevent redirect loops
                    addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)
                }
                
                // Get a list of browsers
                val browserActivities = packageManager.queryIntentActivities(browserIntent, 0)
                if (browserActivities.isNotEmpty()) {
                    // Find a browser that is not our app
                    val browserPackage = browserActivities.firstOrNull { 
                        it.activityInfo.packageName != packageName &&
                        !it.activityInfo.packageName.contains("musicredirector")
                    }?.activityInfo?.packageName
                    
                    if (browserPackage != null) {
                        // Set the browser package explicitly
                        browserIntent.setPackage(browserPackage)
                        startActivity(browserIntent)
                        Log.d(TAG, "‚úÖ Launched URL in browser: $browserPackage")
                    } else {
                        // No suitable browser found, try generic intent
                        startActivity(browserIntent)
                        Log.d(TAG, "‚úÖ Launched URL in system browser (fallback)")
                    }
                } else {
                    // No browsers available, try generic intent
                    startActivity(browserIntent)
                    Log.d(TAG, "‚úÖ Launched URL in system browser (no browsers found)")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error launching target app: ${e.message}", e)
            showErrorAndExit("Could not open target app: ${e.message}")
        }
    }
    
    private fun processRedirection(url: String) {
        when {
            url.contains(YOUTUBE_MUSIC_WATCH_PATTERN) -> {
                Log.d(TAG, "üéµ YouTube Music URL detected")
                showProgress("Extracting song info...")
                extractAndRedirect(url)
            }
            url.contains(SPOTIFY_TRACK_PATTERN) -> {
                Log.d(TAG, "üéµ Spotify URL detected")
                showProgress("Extracting song info...")
                extractAndRedirect(url)
            }
            else -> {
                Log.d(TAG, "‚ùì Unknown URL type, finishing")
                finish()
            }
        }
    }
    
    private fun extractAndRedirect(url: String) {
        lifecycleScope.launch {
            try {
                Log.d(TAG, "‚öôÔ∏è Starting song info extraction from: $url")
                val songInfo = MusicLinkExtractor.extractSongInfo(this@RedirectActivity, url)
                
                if (songInfo != null) {
                    val preferredPlatform = preferencesHelper.getPreferredPlatform()
                    Log.d(TAG, "‚úÖ Extraction successful! Title: '${songInfo.title}', Artist: '${songInfo.artist}'")
                    Log.d(TAG, "üéØ Target platform: $preferredPlatform")
                    
                    showProgress("Opening ${getPlatformName(preferredPlatform)}...")
                    
                    // Small delay to show the opening message
                    withContext(Dispatchers.IO) {
                        Thread.sleep(500)
                    }
                    
                    try {
                        // Build a simple search URL
                        val query = Uri.encode("${songInfo.title} ${songInfo.artist}".trim())
                        
                        if (preferredPlatform == PreferencesHelper.PLATFORM_SPOTIFY) {
                            // Simple direct Spotify approach
                            try {
                                val spotifyUri = "spotify:search:$query"
                                
                                // Check if Spotify is really installed
                                val isSpotifyReallyInstalled = isAppInstalled(SPOTIFY_PACKAGE)
                                Log.d(TAG, "üß™ Thorough check: Is Spotify really installed? $isSpotifyReallyInstalled")
                                
                                if (!isSpotifyReallyInstalled) {
                                    // If Spotify is installed but disabled, we need to detect that too
                                    val isSpotifyDisabled = isSpotifyInstalledButDisabled()
                                    
                                    if (isSpotifyDisabled) {
                                        Log.e(TAG, "‚ùå Spotify is installed but disabled")
                                        showSpotifyDisabledPrompt()
                                        return@launch
                                    } else {
                                        Log.e(TAG, "‚ùå Spotify is not installed")
                                        showSpotifyInstallPrompt()
                                        return@launch
                                    }
                                }
                                
                                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(spotifyUri))
                                intent.setPackage(SPOTIFY_PACKAGE)
                                startActivity(intent)
                                Log.d(TAG, "‚úÖ Launched Spotify search")
                            } catch (e: Exception) {
                                Log.e(TAG, "‚ùå Failed to launch Spotify: ${e.message}")
                                showWrongConfigAlert(preferredPlatform)
                            }
                        } else if (preferredPlatform == PreferencesHelper.PLATFORM_YOUTUBE_MUSIC) {
                            // Simple direct YouTube Music approach
                            try {
                                val youtubeUri = "youtube-music://search?q=$query"
                                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(youtubeUri))
                                intent.setPackage(YOUTUBE_MUSIC_PACKAGE)
                                startActivity(intent)
                                Log.d(TAG, "‚úÖ Launched YouTube Music search")
                            } catch (e: Exception) {
                                Log.e(TAG, "‚ùå Failed to launch YouTube Music: ${e.message}")
                                showWrongConfigAlert(preferredPlatform)
                            }
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Error during redirection: ${e.message}")
                        showWrongConfigAlert(preferredPlatform)
                    }
                } else {
                    Log.e(TAG, "‚ùå Song info extraction failed, no data returned")
                    showErrorAndExit("Could not extract song information")
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error during redirection: ${e.message}")
                showErrorAndExit("Error during redirection: ${e.message}")
            } finally {
                finish()
            }
        }
    }
    
    private fun showWrongConfigAlert(preferredPlatform: String) {
        val platformName = getPlatformName(preferredPlatform)
        
        val instructions = if (preferredPlatform == PreferencesHelper.PLATFORM_SPOTIFY) {
            "Your preferred platform is Spotify, but it appears you're trying to open Spotify with this app.\n\n" +
            "To redirect from YouTube Music to Spotify, you need to:\n" +
            "1. Go to Android Settings > Apps > Music Redirector > Open by default\n" +
            "2. DISABLE 'open.spotify.com' links for this app\n" +
            "3. ENABLE 'music.youtube.com' links for this app\n\n" +
            "Would you like to open these settings now?"
        } else {
            "Your preferred platform is YouTube Music, but it appears you're trying to open YouTube Music with this app.\n\n" +
            "To redirect from Spotify to YouTube Music, you need to:\n" +
            "1. Go to Android Settings > Apps > Music Redirector > Open by default\n" +
            "2. DISABLE 'music.youtube.com' links for this app\n" +
            "3. ENABLE 'open.spotify.com' links for this app\n\n" +
            "Would you like to open these settings now?"
        }
        
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("Incorrect Configuration Detected")
            .setMessage(instructions)
            .setPositiveButton("Open Settings") { _, _ ->
                try {
                    val intent = Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                        data = Uri.parse("package:$packageName")
                        addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                    }
                    startActivity(intent)
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error opening settings: ${e.message}")
                }
            }
            .setNegativeButton("Cancel", null)
            .show()
    }
    
    private fun launchInBrowser(url: String) {
        Log.d(TAG, "üåê Launching in browser: $url")
        
        // Find a browser that isn't our app
        val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(url)).apply {
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        }
        
        val browsers = packageManager.queryIntentActivities(browserIntent, 0)
            .filter { !it.activityInfo.packageName.contains(packageName) }
        
        if (browsers.isNotEmpty()) {
            // Use the first browser that isn't our app
            val browser = browsers.first()
            Log.d(TAG, "üåê Using browser: ${browser.activityInfo.packageName}")
            
            browserIntent.setPackage(browser.activityInfo.packageName)
            startActivity(browserIntent)
        } else {
            // No browser found, try system default
            try {
                startActivity(browserIntent)
                Log.d(TAG, "‚úÖ Launched in system default browser")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error launching browser: ${e.message}")
                showErrorAndExit("Could not open a web browser")
            }
        }
    }
    
    private fun trySpotifyAlternateApproach(songInfo: SongInfo) {
        try {
            Log.d(TAG, "üîÑ Trying alternate approach for Spotify")
            // Spotify URI format: spotify:search:query
            val query = Uri.encode("${songInfo.title} ${songInfo.artist}".trim())
            val spotifyUri = "spotify:search:$query"
            
            Log.d(TAG, "üîç Spotify URI: $spotifyUri")
            
            val intent = Intent(Intent.ACTION_VIEW).apply {
                setData(Uri.parse(spotifyUri))
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            
            startActivity(intent)
            Log.d(TAG, "‚úÖ Alternate approach succeeded")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Alternate approach failed: ${e.message}", e)
            showErrorAndExit("Could not open Spotify")
        }
    }
    
    private fun isAppInstalled(packageName: String): Boolean {
        return try {
            // First check if the package exists at all
            packageManager.getPackageInfo(packageName, 0)
            
            // For Spotify, we need a more reliable way to check if it's installed
            if (packageName == SPOTIFY_PACKAGE) {
                // Try to get installed packages that can handle spotify: URI
                val intent = Intent(Intent.ACTION_VIEW, Uri.parse("spotify:"))
                val activities = packageManager.queryIntentActivities(intent, 0)
                val hasSpotifyHandler = activities.any { it.activityInfo.packageName == SPOTIFY_PACKAGE }
                
                Log.d(TAG, "üì± Checking Spotify installation - activities handling spotify: URI: ${activities.size}, hasSpotifyHandler: $hasSpotifyHandler")
                
                // Fallback method: check if the app info exists
                if (!hasSpotifyHandler) {
                    val appInfo = packageManager.getApplicationInfo(SPOTIFY_PACKAGE, 0)
                    val isEnabled = appInfo.enabled
                    Log.d(TAG, "üì± Fallback Spotify check - isEnabled: $isEnabled")
                    return isEnabled
                }
                
                return hasSpotifyHandler
            } 
            // For YouTube Music, check if it can handle youtube-music: scheme
            else if (packageName == YOUTUBE_MUSIC_PACKAGE) {
                val intent = Intent(Intent.ACTION_VIEW, Uri.parse("youtube-music:"))
                val activities = packageManager.queryIntentActivities(intent, 0)
                val hasYouTubeMusicHandler = activities.any { it.activityInfo.packageName == YOUTUBE_MUSIC_PACKAGE }
                
                Log.d(TAG, "üì± Checking YouTube Music installation - activities handling youtube-music: URI: ${activities.size}, hasHandler: $hasYouTubeMusicHandler")
                
                if (!hasYouTubeMusicHandler) {
                    val appInfo = packageManager.getApplicationInfo(YOUTUBE_MUSIC_PACKAGE, 0)
                    val isEnabled = appInfo.enabled
                    Log.d(TAG, "üì± Fallback YouTube Music check - isEnabled: $isEnabled")
                    return isEnabled
                }
                
                return hasYouTubeMusicHandler
            } 
            // Generic check for other packages
            else {
                val appInfo = packageManager.getApplicationInfo(packageName, 0)
                return appInfo.enabled
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error checking if app $packageName is installed: ${e.message}")
            false
        }
    }
    
    private fun relayToOriginalApp(url: String) {
        try {
            Log.d(TAG, "üîÑ Relaying URL to original app: $url")
            
            val targetPackage = when {
                url.contains("music.youtube.com") -> YOUTUBE_MUSIC_PACKAGE
                url.contains("open.spotify.com") -> SPOTIFY_PACKAGE
                else -> null
            }
            
            if (targetPackage != null && isAppInstalled(targetPackage)) {
                Log.d(TAG, "üéØ Target package for relay: $targetPackage")
                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url)).apply {
                    setPackage(targetPackage)
                    addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                }
                startActivity(intent)
                Log.d(TAG, "‚úÖ Successfully relayed to $targetPackage")
            } else {
                // Use system default if target app not installed, but avoid redirect loops
                Log.d(TAG, "‚ö†Ô∏è Target app not installed, using system handler with browser detection")
                val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(url)).apply {
                    addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                    // Explicitly exclude our package to prevent redirect loops
                    addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)
                }
                
                // Get a list of browsers
                val browserActivities = packageManager.queryIntentActivities(browserIntent, 0)
                if (browserActivities.isNotEmpty()) {
                    // Find a browser that is not our app
                    val browserPackage = browserActivities.firstOrNull { 
                        it.activityInfo.packageName != packageName &&
                        !it.activityInfo.packageName.contains("musicredirector")
                    }?.activityInfo?.packageName
                    
                    if (browserPackage != null) {
                        // Set the browser package explicitly
                        browserIntent.setPackage(browserPackage)
                        startActivity(browserIntent)
                        Log.d(TAG, "‚úÖ Relayed URL to browser: $browserPackage")
                    } else {
                        // No suitable browser found, try generic intent
                        startActivity(browserIntent)
                        Log.d(TAG, "‚úÖ Relayed URL to system browser (fallback)")
                    }
                } else {
                    // No browsers available, try generic intent
                    startActivity(browserIntent)
                    Log.d(TAG, "‚úÖ Relayed URL to system browser (no browsers found)")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error relaying to original app: ${e.message}", e)
            showErrorAndExit("Could not open original app")
        }
    }
    
    private fun shouldRedirect(url: String): Boolean {
        val preferredPlatform = preferencesHelper.getPreferredPlatform()
        val allEnabled = preferencesHelper.isAllRedirectionsEnabled()
        
        if (!allEnabled) {
            Log.d(TAG, "üö´ All redirections disabled")
            return false
        }
        
        return when {
            url.contains(SPOTIFY_TRACK_PATTERN) -> {
                val result = preferencesHelper.isSpotifyRedirectionEnabled() && 
                            preferredPlatform != PreferencesHelper.PLATFORM_SPOTIFY
                Log.d(TAG, "üîç Spotify track URL, should redirect: $result (preferred platform: $preferredPlatform)")
                result
            }
            url.contains(YOUTUBE_MUSIC_WATCH_PATTERN) -> {
                val result = preferencesHelper.isYouTubeMusicRedirectionEnabled() && 
                            preferredPlatform != PreferencesHelper.PLATFORM_YOUTUBE_MUSIC
                Log.d(TAG, "üîç YouTube Music URL, should redirect: $result (preferred platform: $preferredPlatform)")
                result
            }
            url.contains(SHAZAM_SONG_PATTERN) -> {
                val result = preferencesHelper.isShazamRedirectionEnabled()
                Log.d(TAG, "üîç Shazam URL, should redirect: $result")
                result
            }
            else -> {
                Log.d(TAG, "‚ùì Unknown URL pattern, no redirect")
                false
            }
        }
    }
    
    private fun showErrorAndExit(message: String) {
        Log.e(TAG, "‚ùå Error: $message")
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
        finish()
    }

    private fun isYouTubeMusicEnabled(): Boolean {
        return try {
            packageManager.getApplicationInfo(YOUTUBE_MUSIC_PACKAGE, 0).enabled
        } catch (e: PackageManager.NameNotFoundException) {
            false
        }
    }

    private fun showYouTubeMusicWarning() {
        val message = "YouTube Music app is preventing link interception. To use this feature:\n\n" +
                     "1. Go to Settings > Apps\n" +
                     "2. Find 'YouTube Music'\n" +
                     "3. Select 'Disable' or 'Turn off'\n\n" +
                     "This only needs to be done once."
        
        Log.i(TAG, "‚ÑπÔ∏è Showing YouTube Music warning")
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
        
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("Action Required")
            .setMessage(message)
            .setPositiveButton("Open Settings") { _, _ ->
                try {
                    val intent = Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                        data = Uri.parse("package:$YOUTUBE_MUSIC_PACKAGE")
                        addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                    }
                    startActivity(intent)
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error opening settings: ${e.message}")
                }
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun getPlatformName(platform: String): String {
        return when (platform) {
            PreferencesHelper.PLATFORM_SPOTIFY -> "Spotify"
            PreferencesHelper.PLATFORM_YOUTUBE_MUSIC -> "YouTube Music"
            else -> "music app"
        }
    }

    private fun showProgress(message: String) {
        statusText.text = message
        progressOverlay.visibility = View.VISIBLE
    }

    private fun showSpotifyInstallPrompt() {
        val message = "Spotify is not installed on your device. Please install it to use this feature."
        
        Log.i(TAG, "‚ÑπÔ∏è Showing Spotify installation prompt")
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
        
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("Action Required")
            .setMessage(message)
            .setPositiveButton("Install Spotify") { _, _ ->
                try {
                    val intent = Intent(Intent.ACTION_VIEW).apply {
                        data = Uri.parse("market://details?id=$SPOTIFY_PACKAGE")
                        addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                    }
                    startActivity(intent)
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error opening Spotify installation page: ${e.message}")
                }
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun showYouTubeMusicInstallPrompt() {
        val message = "YouTube Music is not installed on your device. Please install it to use this feature."
        
        Log.i(TAG, "‚ÑπÔ∏è Showing YouTube Music installation prompt")
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
        
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("Action Required")
            .setMessage(message)
            .setPositiveButton("Install YouTube Music") { _, _ ->
                try {
                    val intent = Intent(Intent.ACTION_VIEW).apply {
                        data = Uri.parse("market://details?id=$YOUTUBE_MUSIC_PACKAGE")
                        addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                    }
                    startActivity(intent)
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error opening YouTube Music installation page: ${e.message}")
                }
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun isSpotifyInstalledButDisabled(): Boolean {
        try {
            // Check if the package exists but is disabled
            val packageInfo = packageManager.getPackageInfo(SPOTIFY_PACKAGE, PackageManager.GET_DISABLED_COMPONENTS)
            
            // Check if it's disabled
            val appInfo = packageManager.getApplicationInfo(SPOTIFY_PACKAGE, 0)
            return !appInfo.enabled
        } catch (e: Exception) {
            Log.e(TAG, "Error checking if Spotify is disabled: ${e.message}")
            return false
        }
    }

    private fun showSpotifyDisabledPrompt() {
        val message = "Spotify is installed but disabled on your device. Please enable it to use this feature."
        
        Log.i(TAG, "‚ÑπÔ∏è Showing Spotify disabled prompt")
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
        
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("Enable Spotify")
            .setMessage(message)
            .setPositiveButton("Open Settings") { _, _ ->
                try {
                    // Open app settings directly
                    val intent = Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                        data = Uri.parse("package:$SPOTIFY_PACKAGE")
                        addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                    }
                    startActivity(intent)
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error opening Spotify settings: ${e.message}")
                    try {
                        // Fallback to play store
                        val marketIntent = Intent(Intent.ACTION_VIEW).apply {
                            data = Uri.parse("market://details?id=$SPOTIFY_PACKAGE")
                            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                        }
                        startActivity(marketIntent)
                    } catch (e2: Exception) {
                        Log.e(TAG, "‚ùå Error opening Play Store for Spotify: ${e2.message}")
                    }
                }
            }
            .setNegativeButton("Cancel", null)
            .show()
    }
} 